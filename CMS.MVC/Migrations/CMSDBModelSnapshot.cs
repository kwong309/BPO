// <auto-generated />
using CMS.MVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CMS.MVC.Migrations
{
    [DbContext(typeof(CMSDB))]
    partial class CMSDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BPO.EntityFramework.bairong_Administrator", b =>
                {
                    b.Property<string>("UserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255);

                    b.Property<int?>("AreaId");

                    b.Property<int?>("CountOfFailedLogin");

                    b.Property<int?>("CountOfLogin");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<string>("CreatorUserName")
                        .HasMaxLength(255);

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("IsLockedOut")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastActivityDate");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .HasMaxLength(255);

                    b.Property<string>("PasswordFormat")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(128);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("PublishmentSystemIdCollection")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("bairong_RolesRoleName");

                    b.HasKey("UserName");

                    b.HasIndex("bairong_RolesRoleName");

                    b.ToTable("bairong_Administrator");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AreaName")
                        .HasMaxLength(255);

                    b.Property<int?>("ChildrenCount");

                    b.Property<int?>("CountOfAdmin");

                    b.Property<string>("IsLastNode")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("ParentId");

                    b.Property<int?>("ParentsCount");

                    b.Property<string>("ParentsPath")
                        .HasMaxLength(255);

                    b.Property<int?>("Taxis");

                    b.HasKey("AreaId");

                    b.ToTable("bairong_Area");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_ContentCheck", b =>
                {
                    b.Property<int>("CheckId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CheckDate");

                    b.Property<int?>("CheckedLevel");

                    b.Property<int?>("ContentId");

                    b.Property<string>("IsAdmin")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsChecked")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("NodeId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Reasons")
                        .HasMaxLength(255);

                    b.Property<string>("TableName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.HasKey("CheckId");

                    b.ToTable("bairong_ContentCheck");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_ContentModel", b =>
                {
                    b.Property<string>("ModelId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("SiteId");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("IconUrl")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IsSystem")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("ModelName")
                        .HasMaxLength(50);

                    b.Property<string>("TableName")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("TableType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ModelId", "SiteId");

                    b.ToTable("bairong_ContentModel");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_Count", b =>
                {
                    b.Property<int>("CountId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CountNum");

                    b.Property<string>("CountType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RelatedIdentity")
                        .HasMaxLength(255);

                    b.Property<string>("RelatedTableName")
                        .HasMaxLength(255);

                    b.HasKey("CountId");

                    b.ToTable("bairong_Count");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_DbCache", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("CacheKey")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("CacheValue")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("bairong_DbCache");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<int?>("ChildrenCount");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("CountOfAdmin");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(255);

                    b.Property<string>("IsLastNode")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("ParentId");

                    b.Property<int?>("ParentsCount");

                    b.Property<string>("ParentsPath")
                        .HasMaxLength(255);

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<int?>("Taxis");

                    b.HasKey("DepartmentId");

                    b.ToTable("bairong_Department");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_Digg", b =>
                {
                    b.Property<int>("DiggId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Bad");

                    b.Property<int?>("Good");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("RelatedIdentity");

                    b.HasKey("DiggId");

                    b.ToTable("bairong_Digg");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("Message")
                        .HasMaxLength(255);

                    b.Property<string>("Stacktrace")
                        .HasColumnType("ntext");

                    b.Property<string>("Summary")
                        .HasColumnType("ntext");

                    b.HasKey("Id");

                    b.ToTable("bairong_ErrorLog");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("bairong_Log");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_PermissionsInRoles", b =>
                {
                    b.Property<string>("RoleName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255);

                    b.Property<string>("GeneralPermissions")
                        .HasColumnType("text")
                        .IsUnicode(false);

                    b.HasKey("RoleName");

                    b.ToTable("bairong_PermissionsInRoles");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_Roles", b =>
                {
                    b.Property<string>("RoleName")
                        .HasMaxLength(255);

                    b.Property<string>("CreatorUserName")
                        .HasMaxLength(255);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.HasKey("RoleName");

                    b.ToTable("bairong_Roles");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_TableCollection", b =>
                {
                    b.Property<string>("TableEnName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("AttributeNum");

                    b.Property<string>("AuxiliaryTableType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("IsChangedAfterCreatedInDb")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsCreatedInDb")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsDefault")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("TableCnName")
                        .HasMaxLength(50);

                    b.HasKey("TableEnName");

                    b.ToTable("bairong_TableCollection");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_TableMatch", b =>
                {
                    b.Property<int>("TableMatchId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ColumnsMap")
                        .HasColumnType("ntext");

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ConnectionStringToMatch")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("TableName")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("TableNameToMatch")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("TableMatchId");

                    b.ToTable("bairong_TableMatch");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_TableMetadata", b =>
                {
                    b.Property<int>("TableMetadataId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AttributeName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AuxiliaryTableEnName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("DataLength");

                    b.Property<string>("DataType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IsSystem")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("Taxis");

                    b.Property<string>("bairong_TableCollectionTableEnName1");

                    b.HasKey("TableMetadataId");

                    b.HasIndex("AuxiliaryTableEnName");

                    b.HasIndex("bairong_TableCollectionTableEnName1");

                    b.ToTable("bairong_TableMetadata");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_TableStyle", b =>
                {
                    b.Property<int>("TableStyleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AttributeName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255);

                    b.Property<string>("ExtendValues")
                        .HasColumnType("ntext");

                    b.Property<string>("HelpText")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("InputType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IsHorizontal")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsRequired")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsSingleLine")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsVisible")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsVisibleInList")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("RelatedIdentity");

                    b.Property<string>("TableName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Taxis");

                    b.HasKey("TableStyleId");

                    b.ToTable("bairong_TableStyle");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_TableStyleItem", b =>
                {
                    b.Property<int>("TableStyleItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IsSelected")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("ItemTitle")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ItemValue")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("TableStyleId");

                    b.HasKey("TableStyleItemId");

                    b.HasIndex("TableStyleId");

                    b.ToTable("bairong_TableStyleItem");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_Tags", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentIdCollection")
                        .HasMaxLength(255);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Tag")
                        .HasMaxLength(255);

                    b.Property<int?>("UseNum");

                    b.HasKey("TagId");

                    b.ToTable("bairong_Tags");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_ThirdLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("IsEnabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("SettingsXml")
                        .HasColumnType("ntext");

                    b.Property<int?>("Taxis");

                    b.Property<string>("ThirdLoginName")
                        .HasMaxLength(50);

                    b.Property<string>("ThirdLoginType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("bairong_ThirdLogin");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_UserBinding", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("ThirdLoginType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ThirdLoginUserId")
                        .HasMaxLength(200);

                    b.HasKey("UserId");

                    b.ToTable("bairong_UserBinding");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_UserGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ExtendValues")
                        .HasColumnType("ntext");

                    b.Property<string>("GroupName")
                        .HasMaxLength(50);

                    b.Property<string>("IsDefault")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.HasKey("GroupId");

                    b.ToTable("bairong_UserGroup");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_UserLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("bairong_UserLog");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(255);

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Birthday")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("CountOfFailedLogin");

                    b.Property<int?>("CountOfLogin");

                    b.Property<int?>("CountOfWriting");

                    b.Property<DateTime?>("CreateDate");

                    b.Property<string>("Department")
                        .HasMaxLength(255);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255);

                    b.Property<string>("Education")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<string>("ExtendValues")
                        .HasColumnType("ntext");

                    b.Property<string>("Gender")
                        .HasMaxLength(50);

                    b.Property<string>("Graduation")
                        .HasMaxLength(255);

                    b.Property<int?>("GroupId");

                    b.Property<string>("Interests")
                        .HasMaxLength(255);

                    b.Property<string>("IsChecked")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsLockedOut")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastActivityDate");

                    b.Property<DateTime?>("LastResetPasswordDate");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Organization")
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .HasMaxLength(255);

                    b.Property<string>("PasswordFormat")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(128);

                    b.Property<string>("Position")
                        .HasMaxLength(255);

                    b.Property<string>("Qq")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Signature")
                        .HasMaxLength(255);

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.Property<string>("WeiBo")
                        .HasMaxLength(255);

                    b.Property<string>("WeiXin")
                        .HasMaxLength(255);

                    b.HasKey("UserId");

                    b.ToTable("bairong_Users");
                });

            modelBuilder.Entity("BPO.EntityFramework.model_Content", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("AddUserName")
                        .HasMaxLength(255);

                    b.Property<string>("Author")
                        .HasMaxLength(255);

                    b.Property<int?>("CheckedLevel");

                    b.Property<int?>("Comments");

                    b.Property<string>("Content")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentGroupNameCollection")
                        .HasMaxLength(255);

                    b.Property<string>("FileUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("Hits");

                    b.Property<int?>("HitsByDay");

                    b.Property<int?>("HitsByMonth");

                    b.Property<int?>("HitsByWeek");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IsChecked")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsColor")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsHot")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsRecommend")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsTop")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUserName")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("LastHitsDate");

                    b.Property<string>("LinkUrl")
                        .HasMaxLength(200);

                    b.Property<int?>("NodeID");

                    b.Property<int?>("Photos");

                    b.Property<int?>("PublishmentSystemID");

                    b.Property<int?>("ReferenceID");

                    b.Property<string>("SettingsXML")
                        .HasColumnType("ntext");

                    b.Property<string>("Source")
                        .HasMaxLength(255);

                    b.Property<int?>("SourceID");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(255);

                    b.Property<string>("Summary")
                        .HasColumnType("ntext");

                    b.Property<string>("Tags")
                        .HasMaxLength(255);

                    b.Property<int?>("Taxis");

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("WritingUserName")
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("model_Content");
                });

            modelBuilder.Entity("BPO.EntityFramework.model_Job", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("AddUserName")
                        .HasMaxLength(255);

                    b.Property<int?>("CheckedLevel");

                    b.Property<int?>("Comments");

                    b.Property<string>("ContentGroupNameCollection")
                        .HasMaxLength(255);

                    b.Property<string>("Department")
                        .HasMaxLength(255);

                    b.Property<int?>("Hits");

                    b.Property<int?>("HitsByDay");

                    b.Property<int?>("HitsByMonth");

                    b.Property<int?>("HitsByWeek");

                    b.Property<string>("IsChecked")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsTop")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsUrgent")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUserName")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("LastHitsDate");

                    b.Property<string>("Location")
                        .HasMaxLength(255);

                    b.Property<int?>("NodeID");

                    b.Property<string>("NumberOfPeople")
                        .HasMaxLength(50);

                    b.Property<int?>("Photos");

                    b.Property<int?>("PublishmentSystemID");

                    b.Property<int?>("ReferenceID");

                    b.Property<string>("Requirement")
                        .HasColumnType("ntext");

                    b.Property<string>("Responsibility")
                        .HasColumnType("ntext");

                    b.Property<string>("SettingsXML")
                        .HasColumnType("ntext");

                    b.Property<int?>("SourceID");

                    b.Property<string>("Tags")
                        .HasMaxLength(255);

                    b.Property<int?>("Taxis");

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<string>("WritingUserName")
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("model_Job");
                });

            modelBuilder.Entity("BPO.EntityFramework.model_Vote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("AddUserName")
                        .HasMaxLength(255);

                    b.Property<int?>("CheckedLevel");

                    b.Property<int?>("Comments");

                    b.Property<string>("Content")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentGroupNameCollection")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("HiddenContent")
                        .HasColumnType("ntext");

                    b.Property<int?>("Hits");

                    b.Property<int?>("HitsByDay");

                    b.Property<int?>("HitsByMonth");

                    b.Property<int?>("HitsByWeek");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IsChecked")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsClosed")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsImageVote")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsSummary")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsTop")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsVotedView")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUserName")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("LastHitsDate");

                    b.Property<int?>("MaxSelectNum");

                    b.Property<int?>("NodeID");

                    b.Property<int?>("Participants");

                    b.Property<int?>("Photos");

                    b.Property<int?>("PublishmentSystemID");

                    b.Property<int?>("ReferenceID");

                    b.Property<string>("SettingsXML")
                        .HasColumnType("ntext");

                    b.Property<int?>("SourceID");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(255);

                    b.Property<string>("Summary")
                        .HasColumnType("ntext");

                    b.Property<string>("Tags")
                        .HasMaxLength(255);

                    b.Property<int?>("Taxis");

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<string>("WritingUserName")
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("model_Vote");
                });

            modelBuilder.Entity("BPO.EntityFramework.model_WCM_GovInteract", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("AddUserName")
                        .HasMaxLength(255);

                    b.Property<string>("Address")
                        .HasMaxLength(255);

                    b.Property<string>("CardNo")
                        .HasMaxLength(255);

                    b.Property<string>("CardType")
                        .HasMaxLength(255);

                    b.Property<int?>("CheckedLevel");

                    b.Property<int?>("Comments");

                    b.Property<string>("Content")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentGroupNameCollection")
                        .HasMaxLength(255);

                    b.Property<int?>("DepartmentID");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FileUrl")
                        .HasMaxLength(255);

                    b.Property<int?>("Hits");

                    b.Property<int?>("HitsByDay");

                    b.Property<int?>("HitsByMonth");

                    b.Property<int?>("HitsByWeek");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IsChecked")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsPublic")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsRecommend")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsTop")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUserName")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("LastHitsDate");

                    b.Property<int?>("NodeID");

                    b.Property<string>("Organization")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Photos");

                    b.Property<string>("PostCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemID");

                    b.Property<string>("QueryCode")
                        .HasMaxLength(255);

                    b.Property<string>("RealName")
                        .HasMaxLength(255);

                    b.Property<int?>("ReferenceID");

                    b.Property<string>("SettingsXML")
                        .HasColumnType("ntext");

                    b.Property<int?>("SourceID");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Tags")
                        .HasMaxLength(255);

                    b.Property<int?>("Taxis");

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<int?>("TypeID");

                    b.Property<string>("WritingUserName")
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("model_WCM_GovInteract");
                });

            modelBuilder.Entity("BPO.EntityFramework.model_WCM_GovPublic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AbolitionDate");

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("AddUserName")
                        .HasMaxLength(255);

                    b.Property<int?>("Category1ID");

                    b.Property<int?>("Category2ID");

                    b.Property<int?>("Category3ID");

                    b.Property<int?>("Category4ID");

                    b.Property<int?>("Category5ID");

                    b.Property<int?>("Category6ID");

                    b.Property<int?>("CheckedLevel");

                    b.Property<int?>("Comments");

                    b.Property<string>("Content")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentGroupNameCollection")
                        .HasMaxLength(255);

                    b.Property<int?>("DepartmentID");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("DocumentNo")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("EffectDate");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(255);

                    b.Property<int?>("Hits");

                    b.Property<int?>("HitsByDay");

                    b.Property<int?>("HitsByMonth");

                    b.Property<int?>("HitsByWeek");

                    b.Property<string>("Identifier")
                        .HasMaxLength(255);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255);

                    b.Property<string>("IsAbolition")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsChecked")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsColor")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsHot")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsRecommend")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsTop")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("Keywords")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<string>("LastEditUserName")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("LastHitsDate");

                    b.Property<int?>("NodeID");

                    b.Property<int?>("Photos");

                    b.Property<DateTime?>("PublishDate");

                    b.Property<string>("Publisher")
                        .HasMaxLength(255);

                    b.Property<int?>("PublishmentSystemID");

                    b.Property<int?>("ReferenceID");

                    b.Property<string>("SettingsXML")
                        .HasColumnType("ntext");

                    b.Property<int?>("SourceID");

                    b.Property<string>("Tags")
                        .HasMaxLength(255);

                    b.Property<int?>("Taxis");

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<string>("WritingUserName")
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("model_WCM_GovPublic");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_AdArea", b =>
                {
                    b.Property<int>("AdAreaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdAreaName")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("AddDate");

                    b.Property<int?>("Height");

                    b.Property<string>("IsEnabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<int?>("Width");

                    b.HasKey("AdAreaId");

                    b.ToTable("siteserver_AdArea");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_AdMaterial", b =>
                {
                    b.Property<int>("AdMaterialId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdMaterialName")
                        .HasMaxLength(50);

                    b.Property<string>("AdMaterialType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("AdvId");

                    b.Property<int?>("AdvertId");

                    b.Property<string>("Code")
                        .HasColumnType("ntext");

                    b.Property<string>("ImageAlt")
                        .HasMaxLength(50);

                    b.Property<int?>("ImageHeight");

                    b.Property<string>("ImageLink")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("ImageWidth");

                    b.Property<string>("IsEnabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("TextColor")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("TextFontSize");

                    b.Property<string>("TextLink")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("TextWord")
                        .HasMaxLength(255);

                    b.Property<int?>("Weight");

                    b.HasKey("AdMaterialId");

                    b.HasIndex("AdvId");

                    b.ToTable("siteserver_AdMaterial");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_Adv", b =>
                {
                    b.Property<int>("AdvId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdAreaId");

                    b.Property<string>("AdvName")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("FileTemplateIdCollection")
                        .HasMaxLength(4000);

                    b.Property<string>("IsDateLimited")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsEnabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsWeight")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("Level");

                    b.Property<string>("LevelType")
                        .HasMaxLength(50);

                    b.Property<string>("NodeIdCollectionToChannel")
                        .HasMaxLength(4000);

                    b.Property<string>("NodeIdCollectionToContent")
                        .HasMaxLength(4000);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("RotateInterval");

                    b.Property<string>("RotateType")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<int?>("Weight");

                    b.HasKey("AdvId");

                    b.HasIndex("AdAreaId");

                    b.ToTable("siteserver_Adv");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_Advertisement", b =>
                {
                    b.Property<string>("AdvertisementName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("PublishmentSystemId");

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("AdvertisementType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("FileTemplateIdCollection")
                        .HasMaxLength(255);

                    b.Property<string>("IsDateLimited")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("NavigationUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("NodeIdCollectionToChannel")
                        .HasMaxLength(255);

                    b.Property<string>("NodeIdCollectionToContent")
                        .HasMaxLength(255);

                    b.Property<string>("Settings")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("AdvertisementName", "PublishmentSystemId");

                    b.ToTable("siteserver_Advertisement");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_AdvImageClassify", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<int?>("ChildrenCount");

                    b.Property<int?>("ContentNum");

                    b.Property<string>("Enabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsLastItem")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("ItemIndexName")
                        .HasMaxLength(50);

                    b.Property<string>("ItemName")
                        .HasMaxLength(50);

                    b.Property<int?>("ParentId");

                    b.Property<int?>("ParentsCount");

                    b.Property<string>("ParentsPath")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("Taxis");

                    b.HasKey("ItemId");

                    b.ToTable("siteserver_AdvImageClassify");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_AdvImageContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("AddUser")
                        .HasMaxLength(50);

                    b.Property<string>("AdvImageName")
                        .HasMaxLength(50);

                    b.Property<string>("AdvImagePath")
                        .HasMaxLength(500);

                    b.Property<int?>("ClassifyId");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("IsChecked")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("LaseEditUser")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastEditDate");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("SettingsXml")
                        .HasColumnType("ntext");

                    b.Property<int?>("Taxis");

                    b.HasKey("Id");

                    b.ToTable("siteserver_AdvImageContent");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("Content")
                        .HasMaxLength(500);

                    b.Property<int?>("ContentId");

                    b.Property<int?>("GoodCount");

                    b.Property<string>("IsChecked")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("NodeId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("siteserver_Comment");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_ContentGroup", b =>
                {
                    b.Property<string>("ContentGroupName")
                        .HasMaxLength(255);

                    b.Property<int>("PublishmentSystemId");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<int?>("Taxis");

                    b.HasKey("ContentGroupName", "PublishmentSystemId");

                    b.ToTable("siteserver_ContentGroup");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_CreateTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChannelId");

                    b.Property<int?>("ContentId");

                    b.Property<string>("CreateType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("TemplateId");

                    b.HasKey("Id");

                    b.ToTable("siteserver_CreateTask");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_CreateTaskLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<int?>("ChannelId");

                    b.Property<int?>("ContentId");

                    b.Property<string>("CreateType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(255);

                    b.Property<string>("IsSuccess")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("TaskName")
                        .HasMaxLength(50);

                    b.Property<int?>("TemplateId");

                    b.Property<string>("TimeSpan")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("siteserver_CreateTaskLog");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_GatherDatabaseRule", b =>
                {
                    b.Property<string>("GatherRuleName")
                        .HasMaxLength(50);

                    b.Property<int>("PublishmentSystemId");

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("GatherNum");

                    b.Property<string>("IsAutoCreate")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsChecked")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsOrderByDesc")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastGatherDate");

                    b.Property<int?>("NodeId");

                    b.Property<string>("RelatedIdentity")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("RelatedOrderBy")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("RelatedTableName")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("TableMatchId");

                    b.Property<string>("WhereString")
                        .HasMaxLength(255);

                    b.HasKey("GatherRuleName", "PublishmentSystemId");

                    b.ToTable("siteserver_GatherDatabaseRule");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_GatherFileRule", b =>
                {
                    b.Property<string>("GatherRuleName")
                        .HasMaxLength(50);

                    b.Property<int>("PublishmentSystemId");

                    b.Property<string>("Charset")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ContentAttributes")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentAttributesXml")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentContentEnd")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentContentStart")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentExclude")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentHtmlClearCollection")
                        .HasMaxLength(255);

                    b.Property<string>("ContentHtmlClearTagCollection")
                        .HasMaxLength(255);

                    b.Property<string>("ContentTitleEnd")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentTitleStart")
                        .HasColumnType("ntext");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255);

                    b.Property<string>("GatherUrl")
                        .HasMaxLength(255);

                    b.Property<string>("ImageDirectoryPath")
                        .HasMaxLength(255);

                    b.Property<string>("IsAutoCreate")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsChecked")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsRemoveScripts")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsSaveImage")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsSaveRelatedFiles")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsToFile")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastGatherDate");

                    b.Property<int?>("NodeId");

                    b.Property<string>("ScriptDirectoryPath")
                        .HasMaxLength(255);

                    b.Property<string>("StyleDirectoryPath")
                        .HasMaxLength(255);

                    b.HasKey("GatherRuleName", "PublishmentSystemId");

                    b.ToTable("siteserver_GatherFileRule");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_GatherRule", b =>
                {
                    b.Property<string>("GatherRuleName")
                        .HasMaxLength(50);

                    b.Property<int>("PublishmentSystemId");

                    b.Property<string>("Charset")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ContentAttributes")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentAttributesXml")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentChannelEnd")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentChannelStart")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentContentEnd")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentContentStart")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentExclude")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentHtmlClearCollection")
                        .HasMaxLength(255);

                    b.Property<string>("ContentHtmlClearTagCollection")
                        .HasMaxLength(255);

                    b.Property<string>("ContentNextPageEnd")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentNextPageStart")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentTitleEnd")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentTitleStart")
                        .HasColumnType("ntext");

                    b.Property<string>("CookieString")
                        .HasColumnType("text")
                        .IsUnicode(false);

                    b.Property<string>("ExtendValues")
                        .HasColumnType("ntext");

                    b.Property<string>("GatherUrlCollection")
                        .HasColumnType("text")
                        .IsUnicode(false);

                    b.Property<string>("GatherUrlIsCollection")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("GatherUrlIsSerialize")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("GatherUrlSerialize")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastGatherDate");

                    b.Property<string>("ListAreaEnd")
                        .HasColumnType("ntext");

                    b.Property<string>("ListAreaStart")
                        .HasColumnType("ntext");

                    b.Property<int?>("NodeId");

                    b.Property<int?>("SerializeFrom");

                    b.Property<int?>("SerializeInterval");

                    b.Property<string>("SerializeIsAddZero")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("SerializeIsOrderByDesc")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("SerializeTo");

                    b.Property<string>("TitleInclude")
                        .HasMaxLength(255);

                    b.Property<string>("UrlInclude")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("GatherRuleName", "PublishmentSystemId");

                    b.ToTable("siteserver_GatherRule");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_InnerLink", b =>
                {
                    b.Property<string>("InnerLinkName")
                        .HasMaxLength(255);

                    b.Property<int>("PublishmentSystemId");

                    b.Property<string>("LinkUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("InnerLinkName", "PublishmentSystemId");

                    b.ToTable("siteserver_InnerLink");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_Input", b =>
                {
                    b.Property<int>("InputId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("InputName")
                        .HasMaxLength(50);

                    b.Property<string>("IsChecked")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsReply")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("SettingsXml")
                        .HasColumnType("ntext");

                    b.Property<int?>("Taxis");

                    b.HasKey("InputId");

                    b.ToTable("siteserver_Input");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_InputContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<int>("InputId");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IsChecked")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("Reply")
                        .HasColumnType("ntext");

                    b.Property<string>("SettingsXml")
                        .HasColumnType("ntext");

                    b.Property<int?>("Taxis");

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("InputId");

                    b.ToTable("siteserver_InputContent");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_Keyword", b =>
                {
                    b.Property<int>("KeywordId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alternative")
                        .HasMaxLength(50);

                    b.Property<string>("Grade")
                        .HasMaxLength(50);

                    b.Property<string>("Keyword")
                        .HasMaxLength(50);

                    b.HasKey("KeywordId");

                    b.ToTable("siteserver_Keyword");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("AddDate");

                    b.Property<int?>("ChannelId");

                    b.Property<int?>("ContentId");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("siteserver_Log");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_MenuDisplay", b =>
                {
                    b.Property<int>("MenuDisplayId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("BgColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ChildMenuIcon")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("FontColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FontColorHilite")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FontFamily")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("FontSize");

                    b.Property<string>("FontStyle")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FontWeight")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HideOnMouseOut")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("HideTimeout");

                    b.Property<string>("IsDefault")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("MenuBgOpaque")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("MenuBorder");

                    b.Property<string>("MenuBorderBgColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MenuDisplayName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MenuHiliteBgColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MenuItemBgColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MenuItemHAlign")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("MenuItemHeight");

                    b.Property<int?>("MenuItemIndent");

                    b.Property<int?>("MenuItemPadding");

                    b.Property<int?>("MenuItemSpacing");

                    b.Property<string>("MenuItemVAlign")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MenuLiteBgColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("MenuWidth");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Vertical")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("XPosition")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("YPosition")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("MenuDisplayId");

                    b.ToTable("siteserver_MenuDisplay");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_Node", b =>
                {
                    b.Property<int>("NodeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("ChannelFilePathRule")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("ChannelTemplateId");

                    b.Property<int?>("ChildrenCount");

                    b.Property<string>("Content")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentFilePathRule")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ContentModelId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ContentNum");

                    b.Property<int?>("ContentTemplateId");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ExtendValues")
                        .HasColumnType("ntext");

                    b.Property<string>("FilePath")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IsLastNode")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("Keywords")
                        .HasMaxLength(255);

                    b.Property<string>("LinkType")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("LinkUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("NodeGroupNameCollection")
                        .HasMaxLength(255);

                    b.Property<string>("NodeIndexName")
                        .HasMaxLength(255);

                    b.Property<string>("NodeName")
                        .HasMaxLength(255);

                    b.Property<string>("NodeType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ParentId");

                    b.Property<int?>("ParentsCount");

                    b.Property<string>("ParentsPath")
                        .HasMaxLength(255);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("Taxis");

                    b.HasKey("NodeId");

                    b.ToTable("siteserver_Node");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_NodeGroup", b =>
                {
                    b.Property<string>("NodeGroupName")
                        .HasMaxLength(255);

                    b.Property<int>("PublishmentSystemId");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<int?>("Taxis");

                    b.HasKey("NodeGroupName", "PublishmentSystemId");

                    b.ToTable("siteserver_NodeGroup");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ContentId");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("LargeUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("MiddleUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("SmallUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("Taxis");

                    b.HasKey("Id");

                    b.ToTable("siteserver_Photo");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_PluginConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConfigName")
                        .HasMaxLength(200);

                    b.Property<string>("ConfigValue")
                        .HasColumnType("ntext");

                    b.Property<string>("PluginId")
                        .HasMaxLength(50);

                    b.Property<int?>("SiteId");

                    b.HasKey("Id");

                    b.ToTable("siteserver_PluginConfig");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_PublishmentSystem", b =>
                {
                    b.Property<int>("PublishmentSystemId");

                    b.Property<string>("AuxiliaryTableForContent")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AuxiliaryTableForGovInteract")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AuxiliaryTableForGovPublic")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AuxiliaryTableForJob")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AuxiliaryTableForVote")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("CheckContentLevel");

                    b.Property<string>("IsCheckContentUseLevel")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsHeadquarters")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("ParentPublishmentSystemId");

                    b.Property<string>("PublishmentSystemDir")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PublishmentSystemName")
                        .HasMaxLength(50);

                    b.Property<string>("PublishmentSystemType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PublishmentSystemUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("SettingsXml")
                        .HasColumnType("ntext");

                    b.Property<int?>("Taxis");

                    b.HasKey("PublishmentSystemId");

                    b.ToTable("siteserver_PublishmentSystem");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_RelatedField", b =>
                {
                    b.Property<int>("RelatedFieldId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Prefixes")
                        .HasMaxLength(255);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("RelatedFieldName")
                        .HasMaxLength(50);

                    b.Property<string>("Suffixes")
                        .HasMaxLength(255);

                    b.Property<int?>("TotalLevel");

                    b.HasKey("RelatedFieldId");

                    b.ToTable("siteserver_RelatedField");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_RelatedFieldItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ItemName")
                        .HasMaxLength(255);

                    b.Property<string>("ItemValue")
                        .HasMaxLength(255);

                    b.Property<int?>("ParentId");

                    b.Property<int>("RelatedFieldId");

                    b.Property<int?>("Taxis");

                    b.HasKey("Id");

                    b.HasIndex("RelatedFieldId");

                    b.ToTable("siteserver_RelatedFieldItem");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_ResumeContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("AvailabelTime")
                        .HasMaxLength(50);

                    b.Property<string>("Birthday")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Cer_CertificationName")
                        .HasMaxLength(255);

                    b.Property<int?>("Cer_Count");

                    b.Property<string>("Cer_EffectiveDate")
                        .HasMaxLength(255);

                    b.Property<int?>("Edu_Count");

                    b.Property<string>("Edu_Education")
                        .HasMaxLength(255);

                    b.Property<string>("Edu_FromMonth")
                        .HasMaxLength(50);

                    b.Property<string>("Edu_FromYear")
                        .HasMaxLength(50);

                    b.Property<string>("Edu_Profession")
                        .HasMaxLength(255);

                    b.Property<string>("Edu_SchoolName")
                        .HasMaxLength(255);

                    b.Property<string>("Edu_Summary")
                        .HasColumnType("ntext");

                    b.Property<string>("Edu_ToMonth")
                        .HasMaxLength(50);

                    b.Property<string>("Edu_ToYear")
                        .HasMaxLength(50);

                    b.Property<string>("Education")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Exp_Count");

                    b.Property<string>("Exp_Department")
                        .HasMaxLength(255);

                    b.Property<string>("Exp_EmployerName")
                        .HasMaxLength(255);

                    b.Property<string>("Exp_EmployerPhone")
                        .HasMaxLength(255);

                    b.Property<string>("Exp_FromMonth")
                        .HasMaxLength(50);

                    b.Property<string>("Exp_FromYear")
                        .HasMaxLength(50);

                    b.Property<string>("Exp_Industry")
                        .HasMaxLength(255);

                    b.Property<string>("Exp_PositionTitle")
                        .HasMaxLength(255);

                    b.Property<string>("Exp_Score")
                        .HasColumnType("ntext");

                    b.Property<string>("Exp_Summary")
                        .HasColumnType("ntext");

                    b.Property<string>("Exp_ToMonth")
                        .HasMaxLength(50);

                    b.Property<string>("Exp_ToYear")
                        .HasMaxLength(50);

                    b.Property<string>("Exp_WorkPlace")
                        .HasMaxLength(255);

                    b.Property<string>("ExpectSalary")
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .HasMaxLength(50);

                    b.Property<string>("HomePhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IdCardNo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IdCardType")
                        .HasMaxLength(50);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IsView")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("JobContentId");

                    b.Property<int?>("Lan_Count");

                    b.Property<string>("Lan_Language")
                        .HasMaxLength(255);

                    b.Property<string>("Lan_Level")
                        .HasMaxLength(255);

                    b.Property<string>("LastSchoolName")
                        .HasMaxLength(50);

                    b.Property<string>("Location")
                        .HasMaxLength(50);

                    b.Property<string>("Marriage")
                        .HasMaxLength(50);

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Nationality")
                        .HasMaxLength(50);

                    b.Property<int?>("Pro_Count");

                    b.Property<string>("Pro_FromMonth")
                        .HasMaxLength(50);

                    b.Property<string>("Pro_FromYear")
                        .HasMaxLength(50);

                    b.Property<string>("Pro_ProjectName")
                        .HasMaxLength(255);

                    b.Property<string>("Pro_Summary")
                        .HasColumnType("ntext");

                    b.Property<string>("Pro_ToMonth")
                        .HasMaxLength(50);

                    b.Property<string>("Pro_ToYear")
                        .HasMaxLength(50);

                    b.Property<string>("Profession")
                        .HasMaxLength(50);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("RealName")
                        .HasMaxLength(50);

                    b.Property<string>("Ski_Ability")
                        .HasMaxLength(255);

                    b.Property<int?>("Ski_Count");

                    b.Property<string>("Ski_SkillName")
                        .HasMaxLength(255);

                    b.Property<string>("Ski_UsedTimes")
                        .HasMaxLength(255);

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("Tra_Centification")
                        .HasMaxLength(255);

                    b.Property<int?>("Tra_Count");

                    b.Property<string>("Tra_FromMonth")
                        .HasMaxLength(50);

                    b.Property<string>("Tra_FromYear")
                        .HasMaxLength(50);

                    b.Property<string>("Tra_Lesson")
                        .HasMaxLength(255);

                    b.Property<string>("Tra_Summary")
                        .HasMaxLength(255);

                    b.Property<string>("Tra_ToMonth")
                        .HasMaxLength(50);

                    b.Property<string>("Tra_ToYear")
                        .HasMaxLength(50);

                    b.Property<string>("Tra_TrainerAddress")
                        .HasMaxLength(255);

                    b.Property<string>("Tra_TrainerName")
                        .HasMaxLength(255);

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.Property<string>("WorkYear")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("siteserver_ResumeContent");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_SeoMeta", b =>
                {
                    b.Property<int>("SeoMetaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author")
                        .HasMaxLength(50);

                    b.Property<string>("Charset")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Copyright")
                        .HasMaxLength(255);

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Distribution")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("Expires")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IsDefault")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("Keywords")
                        .HasMaxLength(100);

                    b.Property<string>("Language")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PageTitle")
                        .HasMaxLength(80);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Rating")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RevisitAfter")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Robots")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SeoMetaName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("SeoMetaId");

                    b.ToTable("siteserver_SeoMeta");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_SeoMetasInNodes", b =>
                {
                    b.Property<int>("NodeId");

                    b.Property<string>("IsChannel")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int>("SeoMetaId");

                    b.HasKey("NodeId", "IsChannel");

                    b.HasAlternateKey("IsChannel", "NodeId", "SeoMetaId");

                    b.ToTable("siteserver_SeoMetasInNodes");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_SigninLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ContentId");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IsSignin")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<DateTime?>("SigninDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("siteserver_SigninLog");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_SigninSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ContentId");

                    b.Property<string>("EndDate")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IsGroup")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsSignin")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("NodeId");

                    b.Property<int?>("Priority");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<DateTime?>("SigninDate");

                    b.Property<string>("UserGroupCollection")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("UserNameCollection")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("siteserver_SigninSetting");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_SigninUserContentId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentIdCollection")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("GroupId");

                    b.Property<string>("IsGroup")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("NodeId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("siteserver_SigninUserContentId");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_Star", b =>
                {
                    b.Property<int>("StarId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<int?>("ChannelId");

                    b.Property<int?>("ContentId");

                    b.Property<string>("Message")
                        .HasMaxLength(255);

                    b.Property<int?>("Point");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.HasKey("StarId");

                    b.ToTable("siteserver_Star");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_StarSetting", b =>
                {
                    b.Property<int>("StarSettingId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChannelId");

                    b.Property<int?>("ContentId");

                    b.Property<decimal?>("PointAverage");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("TotalCount");

                    b.HasKey("StarSettingId");

                    b.ToTable("siteserver_StarSetting");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_StlTag", b =>
                {
                    b.Property<string>("TagName")
                        .HasMaxLength(50);

                    b.Property<int>("PublishmentSystemId");

                    b.Property<string>("TagContent")
                        .HasColumnType("ntext");

                    b.Property<string>("TagDescription")
                        .HasMaxLength(255);

                    b.HasKey("TagName", "PublishmentSystemId");

                    b.HasAlternateKey("PublishmentSystemId", "TagName");

                    b.ToTable("siteserver_StlTag");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_SystemPermissions", b =>
                {
                    b.Property<string>("RoleName")
                        .HasMaxLength(255);

                    b.Property<int>("PublishmentSystemId");

                    b.Property<string>("ChannelPermissions")
                        .HasColumnType("text")
                        .IsUnicode(false);

                    b.Property<string>("NodeIdCollection")
                        .HasColumnType("text")
                        .IsUnicode(false);

                    b.Property<string>("WebsitePermissions")
                        .HasColumnType("text")
                        .IsUnicode(false);

                    b.HasKey("RoleName", "PublishmentSystemId");

                    b.HasAlternateKey("PublishmentSystemId", "RoleName");

                    b.ToTable("siteserver_SystemPermissions");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_TagStyle", b =>
                {
                    b.Property<int>("StyleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentTemplate")
                        .HasColumnType("ntext");

                    b.Property<string>("ElementName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FailureTemplate")
                        .HasColumnType("ntext");

                    b.Property<string>("IsTemplate")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("ScriptTemplate")
                        .HasColumnType("ntext");

                    b.Property<string>("SettingsXml")
                        .HasColumnType("ntext");

                    b.Property<string>("StyleName")
                        .HasMaxLength(50);

                    b.Property<string>("StyleTemplate")
                        .HasColumnType("ntext");

                    b.Property<string>("SuccessTemplate")
                        .HasColumnType("ntext");

                    b.HasKey("StyleId");

                    b.ToTable("siteserver_TagStyle");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("FrequencyType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IsEnabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsSystemTask")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastExecuteDate");

                    b.Property<DateTime?>("OnlyOnceDate");

                    b.Property<int?>("PeriodIntervalMinute");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("ServiceParameters")
                        .HasColumnType("ntext");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("StartDay");

                    b.Property<int?>("StartHour");

                    b.Property<int?>("StartWeekday");

                    b.Property<string>("TaskName")
                        .HasMaxLength(50);

                    b.HasKey("TaskId");

                    b.ToTable("siteserver_Task");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_TaskLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(255);

                    b.Property<string>("IsSuccess")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int>("TaskId");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("siteserver_TaskLog");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_Template", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Charset")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CreatedFileExtName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CreatedFileFullName")
                        .HasMaxLength(50);

                    b.Property<string>("IsDefault")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("RelatedFileName")
                        .HasMaxLength(50);

                    b.Property<string>("TemplateName")
                        .HasMaxLength(50);

                    b.Property<string>("TemplateType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("TemplateId");

                    b.ToTable("siteserver_Template");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_TemplateLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("AddUserName")
                        .HasMaxLength(255);

                    b.Property<int?>("ContentLength");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("TemplateContent")
                        .HasColumnType("ntext");

                    b.Property<int?>("TemplateId");

                    b.HasKey("Id");

                    b.ToTable("siteserver_TemplateLog");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_TemplateMatch", b =>
                {
                    b.Property<int>("NodeId");

                    b.Property<string>("ChannelFilePathRule")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("ChannelTemplateId");

                    b.Property<string>("ContentFilePathRule")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("ContentTemplateId");

                    b.Property<string>("FilePath")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.HasKey("NodeId");

                    b.ToTable("siteserver_TemplateMatch");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_Tracking", b =>
                {
                    b.Property<int>("TrackingId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AccessDateTime");

                    b.Property<string>("Browser")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IpAddress")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastAccessDateTime");

                    b.Property<string>("OperatingSystem")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("PageContentId");

                    b.Property<int?>("PageNodeId");

                    b.Property<string>("PageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Referrer")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("TrackerType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("TrackingId");

                    b.ToTable("siteserver_Tracking");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_VoteOperation", b =>
                {
                    b.Property<int>("OperationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<int?>("ContentId");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("NodeId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.HasKey("OperationId");

                    b.ToTable("siteserver_VoteOperation");
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_VoteOption", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ContentId");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("NavigationUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("NodeId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<int?>("VoteNum");

                    b.HasKey("OptionId");

                    b.ToTable("siteserver_VoteOption");
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovInteractChannel", b =>
                {
                    b.Property<int>("NodeId");

                    b.Property<int?>("ApplyStyleId");

                    b.Property<string>("DepartmentIdCollection")
                        .HasMaxLength(255);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("QueryStyleId");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.HasKey("NodeId");

                    b.ToTable("wcm_GovInteractChannel");
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovInteractLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<int?>("ContentId");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LogType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("NodeId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.HasKey("LogId");

                    b.HasIndex("NodeId");

                    b.ToTable("wcm_GovInteractLog");
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovInteractPermissions", b =>
                {
                    b.Property<int>("NodeId");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.Property<string>("Permissions")
                        .HasMaxLength(255);

                    b.HasKey("NodeId", "UserName");

                    b.ToTable("wcm_GovInteractPermissions");
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovInteractRemark", b =>
                {
                    b.Property<int>("RemarkId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<int?>("ContentId");

                    b.Property<int?>("DepartmentId");

                    b.Property<int>("NodeId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Remark")
                        .HasMaxLength(255);

                    b.Property<string>("RemarkType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.HasKey("RemarkId");

                    b.HasIndex("NodeId");

                    b.ToTable("wcm_GovInteractRemark");
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovInteractReply", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<int?>("ContentId");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(255);

                    b.Property<int>("NodeId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Reply")
                        .HasColumnType("ntext");

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.HasKey("ReplyId");

                    b.HasIndex("NodeId");

                    b.ToTable("wcm_GovInteractReply");
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovInteractType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("NodeId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("Taxis");

                    b.Property<string>("TypeName")
                        .HasMaxLength(50);

                    b.HasKey("TypeId");

                    b.HasIndex("NodeId");

                    b.ToTable("wcm_GovInteractType");
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovPublicApply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("CivicAddress")
                        .HasMaxLength(255);

                    b.Property<string>("CivicCardNo")
                        .HasMaxLength(255);

                    b.Property<string>("CivicCardType")
                        .HasMaxLength(255);

                    b.Property<string>("CivicEmail")
                        .HasMaxLength(255);

                    b.Property<string>("CivicFax")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CivicName")
                        .HasMaxLength(255);

                    b.Property<string>("CivicOrganization")
                        .HasMaxLength(255);

                    b.Property<string>("CivicPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CivicPostCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Content")
                        .HasColumnType("ntext");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(255);

                    b.Property<string>("IsApplyFree")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsOrganization")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("ObtainType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("OrgAddress")
                        .HasMaxLength(255);

                    b.Property<string>("OrgEmail")
                        .HasMaxLength(255);

                    b.Property<string>("OrgFax")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("OrgLegalPerson")
                        .HasMaxLength(255);

                    b.Property<string>("OrgLinkName")
                        .HasMaxLength(255);

                    b.Property<string>("OrgName")
                        .HasMaxLength(255);

                    b.Property<string>("OrgPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("OrgPostCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("OrgUnitCode")
                        .HasMaxLength(255);

                    b.Property<string>("ProvideType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Purpose")
                        .HasMaxLength(255);

                    b.Property<string>("QueryCode")
                        .HasMaxLength(255);

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("StyleId");

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("wcm_GovPublicApply");
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovPublicApplyLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<int?>("ApplyId");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LogType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.Property<int?>("wcm_GovPublicApplyId1");

                    b.HasKey("LogId");

                    b.HasIndex("ApplyId");

                    b.HasIndex("wcm_GovPublicApplyId1");

                    b.ToTable("wcm_GovPublicApplyLog");
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovPublicApplyRemark", b =>
                {
                    b.Property<int>("RemarkId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<int?>("ApplyId");

                    b.Property<int?>("DepartmentId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Remark")
                        .HasMaxLength(255);

                    b.Property<string>("RemarkType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.Property<int?>("wcm_GovPublicApplyId1");

                    b.HasKey("RemarkId");

                    b.HasIndex("ApplyId");

                    b.HasIndex("wcm_GovPublicApplyId1");

                    b.ToTable("wcm_GovPublicApplyRemark");
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovPublicApplyReply", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<int?>("ApplyId");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(255);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Reply")
                        .HasColumnType("ntext");

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.Property<int?>("wcm_GovPublicApplyId1");

                    b.HasKey("ReplyId");

                    b.HasIndex("ApplyId");

                    b.HasIndex("wcm_GovPublicApplyId1");

                    b.ToTable("wcm_GovPublicApplyReply");
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovPublicCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("CategoryCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CategoryName")
                        .HasMaxLength(255);

                    b.Property<int?>("ChildrenCount");

                    b.Property<string>("ClassCode")
                        .HasMaxLength(50);

                    b.Property<int?>("ContentNum");

                    b.Property<string>("IsLastNode")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("ParentId");

                    b.Property<int?>("ParentsCount");

                    b.Property<string>("ParentsPath")
                        .HasMaxLength(255);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<int?>("Taxis");

                    b.HasKey("CategoryId");

                    b.HasIndex("ClassCode", "PublishmentSystemId");

                    b.ToTable("wcm_GovPublicCategory");
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovPublicCategoryClass", b =>
                {
                    b.Property<string>("ClassCode")
                        .HasMaxLength(50);

                    b.Property<int>("PublishmentSystemId");

                    b.Property<string>("ClassName")
                        .HasMaxLength(255);

                    b.Property<string>("ContentAttributeName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("IsEnabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsSystem")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("Taxis");

                    b.HasKey("ClassCode", "PublishmentSystemId");

                    b.ToTable("wcm_GovPublicCategoryClass");
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovPublicChannel", b =>
                {
                    b.Property<int>("NodeId");

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.HasKey("NodeId");

                    b.ToTable("wcm_GovPublicChannel");
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovPublicIdentifierRule", b =>
                {
                    b.Property<int>("RuleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AttributeName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FormatString")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IdentifierType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("MinLength");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("RuleName")
                        .HasMaxLength(255);

                    b.Property<int?>("Sequence");

                    b.Property<string>("SettingsXml")
                        .HasColumnType("ntext");

                    b.Property<string>("Suffix")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Taxis");

                    b.HasKey("RuleId");

                    b.ToTable("wcm_GovPublicIdentifierRule");
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovPublicIdentifierSeq", b =>
                {
                    b.Property<int>("SeqId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddYear");

                    b.Property<int?>("DepartmentId");

                    b.Property<int?>("NodeId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("Sequence");

                    b.HasKey("SeqId");

                    b.ToTable("wcm_GovPublicIdentifierSeq");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AppId")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("AppSecret")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("DefaultReplyKeyword")
                        .HasMaxLength(50);

                    b.Property<string>("IsBinding")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsDefaultReply")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsWelcome")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("SourceId")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ThumbUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Token")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("WeChatId")
                        .HasMaxLength(255);

                    b.Property<string>("WelcomeKeyword")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("wx_Account");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IsDisabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("KeywordId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("PvCount");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("wx_Album");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_AlbumContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AlbumId");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("LargeImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("ParentId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("wx_AlbumContent");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentDescription")
                        .HasMaxLength(255);

                    b.Property<string>("ContentImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ContentIsSingle")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("ContentResultTopImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("EndImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("EndSummary")
                        .HasMaxLength(255);

                    b.Property<string>("EndTitle")
                        .HasMaxLength(255);

                    b.Property<string>("FormEmailTitle")
                        .HasMaxLength(50);

                    b.Property<string>("FormMobileTitle")
                        .HasMaxLength(50);

                    b.Property<string>("FormRealNameTitle")
                        .HasMaxLength(50);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IsDisabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsFormEmail")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsFormMobile")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsFormRealName")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("KeywordId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("PvCount");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<int?>("UserCount");

                    b.HasKey("Id");

                    b.ToTable("wx_Appointment");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_AppointmentContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<int?>("AppointmentId");

                    b.Property<int?>("AppointmentItemId");

                    b.Property<string>("CookieSn")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Message")
                        .HasMaxLength(255);

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("RealName")
                        .HasMaxLength(255);

                    b.Property<string>("SettingsXml")
                        .HasColumnType("ntext");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.Property<string>("WxOpenId")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("wx_AppointmentContent");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_AppointmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AppointmentId");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("DescriptionTitle")
                        .HasMaxLength(255);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ImageUrlCollection")
                        .HasColumnType("ntext");

                    b.Property<string>("ImageUrlCollectionTitle")
                        .HasMaxLength(255);

                    b.Property<string>("ImageUrlTitle")
                        .HasMaxLength(255);

                    b.Property<string>("IsDescription")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsImageUrl")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsImageUrlCollection")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsMap")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsTel")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsVideoUrl")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("LargeImageUrlCollection")
                        .HasColumnType("ntext");

                    b.Property<string>("MapAddress")
                        .HasMaxLength(255);

                    b.Property<string>("MapTitle")
                        .HasMaxLength(255);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Tel")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("TelTitle")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<string>("TopImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("UserCount");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("VideoUrlTitle")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("wx_AppointmentItem");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CardNoColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CardTitle")
                        .HasMaxLength(255);

                    b.Property<string>("CardTitleColor")
                        .HasMaxLength(50);

                    b.Property<string>("ContentBackImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ContentFrontImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IsDisabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("KeywordId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("PvCount");

                    b.Property<string>("ShopAddress")
                        .HasMaxLength(255);

                    b.Property<string>("ShopName")
                        .HasMaxLength(255);

                    b.Property<string>("ShopOperatorList")
                        .HasColumnType("ntext");

                    b.Property<string>("ShopPassword")
                        .HasMaxLength(200);

                    b.Property<string>("ShopPosition")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ShopTel")
                        .HasMaxLength(255);

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<int?>("UserCount");

                    b.HasKey("Id");

                    b.ToTable("wx_Card");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_CardCashLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<decimal?>("Amount");

                    b.Property<int?>("CardId");

                    b.Property<int?>("CardSnId");

                    b.Property<string>("CashType")
                        .HasMaxLength(50);

                    b.Property<string>("ConsumeType")
                        .HasMaxLength(50);

                    b.Property<decimal?>("CurAmount");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Operator")
                        .HasMaxLength(255);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("wx_CardCashLog");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_CardEntitySn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("Address")
                        .HasMaxLength(255);

                    b.Property<decimal?>("Amount");

                    b.Property<int?>("CardId");

                    b.Property<int?>("Credits");

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<string>("IsBinding")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Sn")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("wx_CardEntitySn");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_CardSignLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<DateTime?>("SignDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("wx_CardSignLog");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_CardSn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<decimal?>("Amount");

                    b.Property<int?>("CardId");

                    b.Property<string>("IsDisabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Sn")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("wx_CardSn");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_Collect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentDescription")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ContentIsCheck")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("ContentMaxVote");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("EndImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("EndSummary")
                        .HasMaxLength(255);

                    b.Property<string>("EndTitle")
                        .HasMaxLength(255);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IsDisabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("KeywordId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("PvCount");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<int?>("UserCount");

                    b.HasKey("Id");

                    b.ToTable("wx_Collect");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_CollectItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CollectId");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("IsChecked")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("LargeUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Mobile")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("SmallUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<int?>("VoteNum");

                    b.HasKey("Id");

                    b.ToTable("wx_CollectItem");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_CollectLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<int?>("CollectId");

                    b.Property<string>("CookieSn")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ItemId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.Property<string>("WxOpenId")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("wx_CollectLog");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_Conference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(255);

                    b.Property<string>("AgendaList")
                        .HasColumnType("ntext");

                    b.Property<string>("AgendaTitle")
                        .HasMaxLength(255);

                    b.Property<string>("BackgroundImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ConferenceName")
                        .HasMaxLength(255);

                    b.Property<string>("Duration")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("EndImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("EndSummary")
                        .HasMaxLength(255);

                    b.Property<string>("EndTitle")
                        .HasMaxLength(255);

                    b.Property<string>("GuestList")
                        .HasColumnType("ntext");

                    b.Property<string>("GuestTitle")
                        .HasMaxLength(255);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Introduction")
                        .HasColumnType("ntext");

                    b.Property<string>("IsAgenda")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsDisabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsGuest")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("KeywordId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("PvCount");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<int?>("UserCount");

                    b.HasKey("Id");

                    b.ToTable("wx_Conference");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_ConferenceContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("Company")
                        .HasMaxLength(255);

                    b.Property<int?>("ConferenceId");

                    b.Property<string>("CookieSn")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Note")
                        .HasMaxLength(255);

                    b.Property<string>("Position")
                        .HasMaxLength(255);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("RealName")
                        .HasMaxLength(255);

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.Property<string>("WxOpenId")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("wx_ConferenceContent");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_ConfigExtend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AttributeName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FunctionId");

                    b.Property<string>("IsVisible")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("KeywordType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.HasKey("Id");

                    b.ToTable("wx_ConfigExtend");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_Count", b =>
                {
                    b.Property<int>("CountId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Count");

                    b.Property<int?>("CountDay");

                    b.Property<int?>("CountMonth");

                    b.Property<string>("CountType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("CountYear");

                    b.Property<int?>("PublishmentSystemId");

                    b.HasKey("CountId");

                    b.ToTable("wx_Count");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ActId");

                    b.Property<DateTime?>("AddDate");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<int?>("TotalNum");

                    b.HasKey("Id");

                    b.ToTable("wx_Coupon");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_CouponAct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AwardCode")
                        .HasMaxLength(50);

                    b.Property<string>("ContentDescription")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ContentUsage")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("EndImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("EndSummary")
                        .HasMaxLength(255);

                    b.Property<string>("EndTitle")
                        .HasMaxLength(255);

                    b.Property<string>("FormAddressTitle")
                        .HasMaxLength(255);

                    b.Property<string>("FormEmailTitle")
                        .HasMaxLength(255);

                    b.Property<string>("FormMobileTitle")
                        .HasMaxLength(255);

                    b.Property<string>("FormRealNameTitle")
                        .HasMaxLength(255);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IsDisabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsFormAddress")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsFormEmail")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsFormMobile")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsFormRealName")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("KeywordId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("PvCount");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<int?>("UserCount");

                    b.HasKey("Id");

                    b.ToTable("wx_CouponAct");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_CouponSn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CashDate");

                    b.Property<string>("CashUserName")
                        .HasMaxLength(50);

                    b.Property<string>("CookieSn")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("CouponId");

                    b.Property<string>("HoldAddress")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("HoldDate");

                    b.Property<string>("HoldEmail")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("HoldMobile")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("HoldRealName")
                        .HasMaxLength(255);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Sn")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("WxOpenId")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("wx_CouponSn");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_Keyword", b =>
                {
                    b.Property<int>("KeywordId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("IsDisabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("KeywordType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Keywords")
                        .HasMaxLength(255);

                    b.Property<string>("MatchType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Reply")
                        .HasColumnType("ntext");

                    b.Property<int?>("Taxis");

                    b.HasKey("KeywordId");

                    b.ToTable("wx_Keyword");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_KeywordGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GroupName")
                        .HasMaxLength(255);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("Taxis");

                    b.HasKey("GroupId");

                    b.ToTable("wx_KeywordGroup");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_KeywordMatch", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IsDisabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("Keyword")
                        .HasMaxLength(255);

                    b.Property<int?>("KeywordId");

                    b.Property<string>("KeywordType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MatchType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.HasKey("MatchId");

                    b.ToTable("wx_KeywordMatch");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_KeywordResource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChannelId");

                    b.Property<string>("Content")
                        .HasColumnType("ntext");

                    b.Property<int?>("ContentId");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IsShowCoverPic")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("KeywordId");

                    b.Property<string>("NavigationUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("ResourceType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<int?>("Taxis");

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.HasKey("ResourceId");

                    b.ToTable("wx_KeywordResource");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_Lottery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AwardCode")
                        .HasMaxLength(50);

                    b.Property<string>("AwardImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("AwardMaxCount");

                    b.Property<int?>("AwardMaxDailyCount");

                    b.Property<string>("AwardUsage")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentAwardImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ContentImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ContentUsage")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("EndImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("EndSummary")
                        .HasMaxLength(255);

                    b.Property<string>("EndTitle")
                        .HasMaxLength(255);

                    b.Property<string>("FormAddressTitle")
                        .HasMaxLength(50);

                    b.Property<string>("FormEmailTitle")
                        .HasMaxLength(50);

                    b.Property<string>("FormMobileTitle")
                        .HasMaxLength(50);

                    b.Property<string>("FormRealNameTitle")
                        .HasMaxLength(50);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IsAwardTotalNum")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("IsDisabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsFormAddress")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsFormEmail")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsFormMobile")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsFormRealName")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("KeywordId");

                    b.Property<string>("LotteryType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("PvCount");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<int?>("UserCount");

                    b.HasKey("Id");

                    b.ToTable("wx_Lottery");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_LotteryAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AwardName")
                        .HasMaxLength(255);

                    b.Property<int?>("LotteryId");

                    b.Property<decimal?>("Probability");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<int?>("TotalNum");

                    b.Property<int?>("WonNum");

                    b.HasKey("Id");

                    b.ToTable("wx_LotteryAward");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_LotteryLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CookieSn")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastLotteryDate");

                    b.Property<int?>("LotteryCount");

                    b.Property<int?>("LotteryDailyCount");

                    b.Property<int?>("LotteryId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.Property<string>("WxOpenId")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("wx_LotteryLog");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_LotteryWinner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("Address")
                        .HasMaxLength(255);

                    b.Property<int?>("AwardId");

                    b.Property<DateTime?>("CashDate");

                    b.Property<string>("CashSn")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("CookieSn")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("LotteryId");

                    b.Property<string>("LotteryType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Mobile")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("RealName")
                        .HasMaxLength(255);

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.Property<string>("WxOpenId")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("wx_LotteryWinner");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IsDisabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("KeywordId");

                    b.Property<string>("MapWd")
                        .HasMaxLength(255);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("PvCount");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("wx_Map");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChannelId");

                    b.Property<int?>("ContentId");

                    b.Property<string>("Keyword")
                        .HasMaxLength(50);

                    b.Property<string>("MenuName")
                        .HasMaxLength(50);

                    b.Property<string>("MenuType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ParentId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("Taxis");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("MenuId");

                    b.ToTable("wx_Menu");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentDescription")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IsDisabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("KeywordId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("PvCount");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<int?>("UserCount");

                    b.HasKey("Id");

                    b.ToTable("wx_Message");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_MessageContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Content")
                        .HasMaxLength(255);

                    b.Property<string>("CookieSn")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50);

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IsReply")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("LikeCookieSnCollection")
                        .HasColumnType("ntext");

                    b.Property<int?>("LikeCount");

                    b.Property<int?>("MessageId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("ReplyCount");

                    b.Property<int?>("ReplyId");

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.Property<string>("WxOpenId")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("wx_MessageContent");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_Search", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("ImageAreaChannelId");

                    b.Property<string>("ImageAreaTitle")
                        .HasMaxLength(50);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IsDisabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsNavigation")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("IsOutsiteSearch")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("KeywordId");

                    b.Property<string>("NavImageColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NavTitleColor")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("PvCount");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<int?>("TextAreaChannelId");

                    b.Property<string>("TextAreaTitle")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("wx_Search");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_SearchNavigation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChannelId");

                    b.Property<int?>("ContentId");

                    b.Property<int?>("FunctionId");

                    b.Property<string>("ImageCssClass")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("KeywordType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NavigationType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("SearchId");

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("wx_SearchNavigation");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IsDisabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("KeywordId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("PvCount");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("wx_Store");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_StoreCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName")
                        .HasMaxLength(50);

                    b.Property<int?>("ChildCount");

                    b.Property<string>("IsLastNode")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("ParentId");

                    b.Property<int?>("ParentsCount");

                    b.Property<string>("ParentsPath")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("StoreCount");

                    b.Property<int?>("Taxis");

                    b.HasKey("Id");

                    b.ToTable("wx_StoreCategory");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_StoreItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(255);

                    b.Property<int?>("CategoryId");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Latitude")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Longitude")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Mobile")
                        .HasMaxLength(11);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("StoreId");

                    b.Property<string>("StoreName")
                        .HasMaxLength(255);

                    b.Property<string>("Summary")
                        .HasColumnType("ntext");

                    b.Property<string>("Tel")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("wx_StoreItem");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_View360", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentImageUrl1")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ContentImageUrl2")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ContentImageUrl3")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ContentImageUrl4")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ContentImageUrl5")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ContentImageUrl6")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IsDisabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("KeywordId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("PvCount");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("wx_View360");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentDescription")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ContentIsCheckBox")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("ContentIsImageOption")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<string>("ContentResultVisible")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("EndImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("EndSummary")
                        .HasMaxLength(255);

                    b.Property<string>("EndTitle")
                        .HasMaxLength(255);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IsDisabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("KeywordId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("PvCount");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<int?>("UserCount");

                    b.HasKey("Id");

                    b.ToTable("wx_Vote");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_VoteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("NavigationUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.Property<int?>("VoteId");

                    b.Property<int?>("VoteNum");

                    b.HasKey("Id");

                    b.ToTable("wx_VoteItem");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_VoteLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AddDate");

                    b.Property<string>("CookieSn")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ItemIdCollection")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.Property<int?>("VoteId");

                    b.Property<string>("WxOpenId")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("wx_VoteLog");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_WebMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChannelId");

                    b.Property<int?>("ContentId");

                    b.Property<int?>("FunctionId");

                    b.Property<string>("IconCssClass")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("IconUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("KeywordType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("MenuName")
                        .HasMaxLength(50);

                    b.Property<string>("NavigationType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ParentId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("Taxis");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("wx_WebMenu");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_Wifi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusinessId")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CallBackString")
                        .HasColumnType("ntext");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("IsDisabled")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<int?>("KeywordId");

                    b.Property<int?>("PublishmentSystemId");

                    b.Property<int?>("PvCount");

                    b.Property<string>("Summary")
                        .HasMaxLength(255);

                    b.Property<string>("Title")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("wx_Wifi");
                });

            modelBuilder.Entity("BPO.EntityFramework.wx_WifiNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusinessId")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CallBackString")
                        .HasColumnType("ntext");

                    b.Property<string>("NodeId")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("PublishmentSystemId");

                    b.HasKey("Id");

                    b.ToTable("wx_WifiNode");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_Administrator", b =>
                {
                    b.HasOne("BPO.EntityFramework.bairong_Roles")
                        .WithMany("bairong_Administrator")
                        .HasForeignKey("bairong_RolesRoleName");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_Roles", b =>
                {
                    b.HasOne("BPO.EntityFramework.bairong_Administrator")
                        .WithMany("bairong_Roles")
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_TableMetadata", b =>
                {
                    b.HasOne("BPO.EntityFramework.bairong_TableCollection")
                        .WithMany("bairong_TableMetadata")
                        .HasForeignKey("AuxiliaryTableEnName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BPO.EntityFramework.bairong_TableCollection", "bairong_TableCollection")
                        .WithMany()
                        .HasForeignKey("bairong_TableCollectionTableEnName1");
                });

            modelBuilder.Entity("BPO.EntityFramework.bairong_TableStyleItem", b =>
                {
                    b.HasOne("BPO.EntityFramework.bairong_TableStyle", "bairong_TableStyle")
                        .WithMany("bairong_TableStyleItem")
                        .HasForeignKey("TableStyleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_AdMaterial", b =>
                {
                    b.HasOne("BPO.EntityFramework.siteserver_Adv", "siteserver_Adv")
                        .WithMany("siteserver_AdMaterial")
                        .HasForeignKey("AdvId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_Adv", b =>
                {
                    b.HasOne("BPO.EntityFramework.siteserver_AdArea", "siteserver_AdArea")
                        .WithMany("siteserver_Adv")
                        .HasForeignKey("AdAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_InputContent", b =>
                {
                    b.HasOne("BPO.EntityFramework.siteserver_Input", "siteserver_Input")
                        .WithMany("siteserver_InputContent")
                        .HasForeignKey("InputId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_RelatedFieldItem", b =>
                {
                    b.HasOne("BPO.EntityFramework.siteserver_RelatedField", "siteserver_RelatedField")
                        .WithMany("siteserver_RelatedFieldItem")
                        .HasForeignKey("RelatedFieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BPO.EntityFramework.siteserver_TaskLog", b =>
                {
                    b.HasOne("BPO.EntityFramework.siteserver_Task", "siteserver_Task")
                        .WithMany("siteserver_TaskLog")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovInteractLog", b =>
                {
                    b.HasOne("BPO.EntityFramework.wcm_GovInteractChannel", "wcm_GovInteractChannel")
                        .WithMany("wcm_GovInteractLog")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovInteractPermissions", b =>
                {
                    b.HasOne("BPO.EntityFramework.wcm_GovInteractChannel", "wcm_GovInteractChannel")
                        .WithMany("wcm_GovInteractPermissions")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovInteractRemark", b =>
                {
                    b.HasOne("BPO.EntityFramework.wcm_GovInteractChannel", "wcm_GovInteractChannel")
                        .WithMany("wcm_GovInteractRemark")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovInteractReply", b =>
                {
                    b.HasOne("BPO.EntityFramework.wcm_GovInteractChannel", "wcm_GovInteractChannel")
                        .WithMany("wcm_GovInteractReply")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovInteractType", b =>
                {
                    b.HasOne("BPO.EntityFramework.wcm_GovInteractChannel", "wcm_GovInteractChannel")
                        .WithMany("wcm_GovInteractType")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovPublicApplyLog", b =>
                {
                    b.HasOne("BPO.EntityFramework.wcm_GovPublicApply")
                        .WithMany("wcm_GovPublicApplyLog")
                        .HasForeignKey("ApplyId");

                    b.HasOne("BPO.EntityFramework.wcm_GovPublicApply", "wcm_GovPublicApply")
                        .WithMany()
                        .HasForeignKey("wcm_GovPublicApplyId1");
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovPublicApplyRemark", b =>
                {
                    b.HasOne("BPO.EntityFramework.wcm_GovPublicApply")
                        .WithMany("wcm_GovPublicApplyRemark")
                        .HasForeignKey("ApplyId");

                    b.HasOne("BPO.EntityFramework.wcm_GovPublicApply", "wcm_GovPublicApply")
                        .WithMany()
                        .HasForeignKey("wcm_GovPublicApplyId1");
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovPublicApplyReply", b =>
                {
                    b.HasOne("BPO.EntityFramework.wcm_GovPublicApply")
                        .WithMany("wcm_GovPublicApplyReply")
                        .HasForeignKey("ApplyId");

                    b.HasOne("BPO.EntityFramework.wcm_GovPublicApply", "wcm_GovPublicApply")
                        .WithMany()
                        .HasForeignKey("wcm_GovPublicApplyId1");
                });

            modelBuilder.Entity("BPO.EntityFramework.wcm_GovPublicCategory", b =>
                {
                    b.HasOne("BPO.EntityFramework.wcm_GovPublicCategoryClass", "wcm_GovPublicCategoryClass")
                        .WithMany("wcm_GovPublicCategory")
                        .HasForeignKey("ClassCode", "PublishmentSystemId");
                });
#pragma warning restore 612, 618
        }
    }
}
